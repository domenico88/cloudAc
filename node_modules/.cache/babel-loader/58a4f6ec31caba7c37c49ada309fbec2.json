{"ast":null,"code":"var _jsxFileName = \"/Users/dsgueglia/cloudAc/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Card, Grid, Image } from 'semantic-ui-react';\nimport './App.css';\nimport useSWR from 'swr';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const fetcher = (...args) => fetch(...args).then(res => res.json());\n\n  const {\n    data,\n    error\n  } = useSWR('https://rickandmortyapi.com/api/character', fetcher);\n\n  const renderCard = character => {\n    return /*#__PURE__*/_jsxDEV(Grid.Column, {\n      width: 3,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: character.image,\n          wrapped: true,\n          ui: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Card.Content, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: character.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Status: \", character.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Species: \", character.species]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Gender: \", character.gender]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Origin: \", character.origin.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"location: \", character.location.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Card.Description, {\n            children: character.episode.map(episode => /*#__PURE__*/_jsxDEV(Episode, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 47\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 54\n      }, this)\n    }, character.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  };\n\n  if (data && Object.keys(data).length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar\",\n        children: \" RICK AND MORTY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"cardWrapper\",\n        children: data.results.map(character => renderCard(character))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  } else return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading..\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 15\n  }, this);\n}\n\n_s(App, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\n_c = App;\n\nfunction Episode(episode) {\n  _s2();\n\n  const fetcher = (...args) => fetch(...args).then(res => res.json());\n\n  const {\n    data,\n    error\n  } = useSWR(episode, fetcher);\n  if (data && Object.keys(data).length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}\n\n_s2(Episode, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\n_c2 = Episode;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Episode\");","map":{"version":3,"sources":["/Users/dsgueglia/cloudAc/src/App.js"],"names":["Card","Grid","Image","useSWR","App","fetcher","args","fetch","then","res","json","data","error","renderCard","character","image","name","status","species","gender","origin","location","episode","map","id","Object","keys","length","results","Episode"],"mappings":"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","sourcesContent":["import { Card, Grid, Image } from 'semantic-ui-react'\nimport './App.css';\nimport useSWR from 'swr'\n\nfunction App() {\n  const fetcher = (...args) => fetch(...args).then(res => res.json())\n  const { data, error } = useSWR('https://rickandmortyapi.com/api/character', fetcher)\n\n\n  const renderCard = (character) => {\n    return <Grid.Column key={character.id} width={3}><Card>\n      <Image src={character.image} wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>{character.name}</Card.Header>\n        <Card.Meta>\n          <div>Status: {character.status}</div>\n          <div>Species: {character.species}</div>\n          <div>Gender: {character.gender}</div>\n          <div>Origin: {character.origin.name}</div>\n          <div>location: {character.location.name}</div>\n        </Card.Meta>\n        <Card.Description>\n          {character.episode.map((episode) => <Episode></Episode>)}\n        </Card.Description>\n      </Card.Content>\n\n    </Card>\n    </Grid.Column>\n  }\n  if (data && Object.keys(data).length) {\n    return (\n      <div className=\"App\">\n        <div className=\"navbar\"> RICK AND MORTY</div>\n        <Grid className=\"cardWrapper\">\n          {data.results.map((character) => renderCard(character))}\n        </Grid>\n      </div>\n    );\n  }\n  else return <div>Loading..</div>\n}\n\nfunction Episode(episode) {\n  const fetcher = (...args) => fetch(...args).then(res => res.json())\n  const { data, error } = useSWR(episode, fetcher)\n  if (data && Object.keys(data).length)\n    return <div>{data.name}</div>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}